// ORM class for table 'malware_prediction'
// WARNING: This class is AUTO-GENERATED. Modify at your own risk.
//
// Debug information:
// Generated date: Thu Aug 15 01:50:55 UTC 2019
// For connector: org.apache.sqoop.manager.MySQLManager
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.mapred.lib.db.DBWritable;
import com.cloudera.sqoop.lib.JdbcWritableBridge;
import com.cloudera.sqoop.lib.DelimiterSet;
import com.cloudera.sqoop.lib.FieldFormatter;
import com.cloudera.sqoop.lib.RecordParser;
import com.cloudera.sqoop.lib.BooleanParser;
import com.cloudera.sqoop.lib.BlobRef;
import com.cloudera.sqoop.lib.ClobRef;
import com.cloudera.sqoop.lib.LargeObjectLoader;
import com.cloudera.sqoop.lib.SqoopRecord;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

public class malware_prediction extends SqoopRecord  implements DBWritable, Writable {
  private final int PROTOCOL_VERSION = 3;
  public int getClassFormatVersion() { return PROTOCOL_VERSION; }
  public static interface FieldSetterCommand {    void setField(Object value);  }  protected ResultSet __cur_result_set;
  private Map<String, FieldSetterCommand> setters = new HashMap<String, FieldSetterCommand>();
  private void init0() {
    setters.put("MachineId", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.MachineId = (Integer)value;
      }
    });
    setters.put("IsBeta", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.IsBeta = (Integer)value;
      }
    });
    setters.put("AVProductStatesIdentifier", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.AVProductStatesIdentifier = (Double)value;
      }
    });
    setters.put("AVProductsInstalled", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.AVProductsInstalled = (Double)value;
      }
    });
    setters.put("AVProductsEnabled", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.AVProductsEnabled = (Double)value;
      }
    });
    setters.put("HasTpm", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.HasTpm = (Double)value;
      }
    });
    setters.put("Platform", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Platform = (String)value;
      }
    });
    setters.put("Processor", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Processor = (String)value;
      }
    });
    setters.put("OsVer", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.OsVer = (String)value;
      }
    });
    setters.put("OsBuild", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.OsBuild = (Double)value;
      }
    });
    setters.put("OsSuite", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.OsSuite = (Double)value;
      }
    });
    setters.put("OsPlatformSubRelease", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.OsPlatformSubRelease = (String)value;
      }
    });
    setters.put("IsProtected", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.IsProtected = (Double)value;
      }
    });
    setters.put("Firewall", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Firewall = (Double)value;
      }
    });
    setters.put("UacLuaenable", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.UacLuaenable = (Double)value;
      }
    });
    setters.put("Census_DeviceFamily", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_DeviceFamily = (String)value;
      }
    });
    setters.put("Census_ProcessorCoreCount", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_ProcessorCoreCount = (Double)value;
      }
    });
    setters.put("Census_ProcessorManufacturerIdentifier", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_ProcessorManufacturerIdentifier = (Double)value;
      }
    });
    setters.put("Census_ProcessorModelIdentifier", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_ProcessorModelIdentifier = (Double)value;
      }
    });
    setters.put("Census_PrimaryDiskTotalCapacity", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_PrimaryDiskTotalCapacity = (Double)value;
      }
    });
    setters.put("Census_PrimaryDiskTypeName", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_PrimaryDiskTypeName = (String)value;
      }
    });
    setters.put("Census_SystemVolumeTotalCapacity", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_SystemVolumeTotalCapacity = (Double)value;
      }
    });
    setters.put("Census_HasOpticalDiskDrive", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_HasOpticalDiskDrive = (Integer)value;
      }
    });
    setters.put("Census_TotalPhysicalRAM", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_TotalPhysicalRAM = (Double)value;
      }
    });
    setters.put("Census_PowerPlatformRoleName", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_PowerPlatformRoleName = (String)value;
      }
    });
    setters.put("Census_InternalBatteryNumberOfCharges", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_InternalBatteryNumberOfCharges = (Double)value;
      }
    });
    setters.put("Census_OSArchitecture", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_OSArchitecture = (String)value;
      }
    });
    setters.put("Census_OSEdition", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_OSEdition = (String)value;
      }
    });
    setters.put("Census_OSWUAutoUpdateOptionsName", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_OSWUAutoUpdateOptionsName = (String)value;
      }
    });
    setters.put("Census_IsPortableOperatingSystem", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_IsPortableOperatingSystem = (Integer)value;
      }
    });
    setters.put("Census_FirmwareManufacturerIdentifier", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_FirmwareManufacturerIdentifier = (Double)value;
      }
    });
    setters.put("Census_IsSecureBootEnabled", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_IsSecureBootEnabled = (Integer)value;
      }
    });
    setters.put("Census_IsVirtualDevice", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_IsVirtualDevice = (Double)value;
      }
    });
    setters.put("Census_IsTouchEnabled", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_IsTouchEnabled = (Integer)value;
      }
    });
    setters.put("Census_IsPenCapable", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_IsPenCapable = (Integer)value;
      }
    });
    setters.put("Census_IsAlwaysOnAlwaysConnectedCapable", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_IsAlwaysOnAlwaysConnectedCapable = (Double)value;
      }
    });
    setters.put("Wdft_IsGamer", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Wdft_IsGamer = (Double)value;
      }
    });
    setters.put("Census_InternalPrimaryDiagonalDisplaySizeInInches", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_InternalPrimaryDiagonalDisplaySizeInInches = (Double)value;
      }
    });
    setters.put("Census_MDC2FormFactor", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_MDC2FormFactor = (String)value;
      }
    });
    setters.put("Census_OSSkuName", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.Census_OSSkuName = (String)value;
      }
    });
    setters.put("SkuEdition", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.SkuEdition = (String)value;
      }
    });
    setters.put("ProductName", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.ProductName = (String)value;
      }
    });
    setters.put("HasDetections", new FieldSetterCommand() {
      @Override
      public void setField(Object value) {
        malware_prediction.this.HasDetections = (Integer)value;
      }
    });
  }
  public malware_prediction() {
    init0();
  }
  private Integer MachineId;
  public Integer get_MachineId() {
    return MachineId;
  }
  public void set_MachineId(Integer MachineId) {
    this.MachineId = MachineId;
  }
  public malware_prediction with_MachineId(Integer MachineId) {
    this.MachineId = MachineId;
    return this;
  }
  private Integer IsBeta;
  public Integer get_IsBeta() {
    return IsBeta;
  }
  public void set_IsBeta(Integer IsBeta) {
    this.IsBeta = IsBeta;
  }
  public malware_prediction with_IsBeta(Integer IsBeta) {
    this.IsBeta = IsBeta;
    return this;
  }
  private Double AVProductStatesIdentifier;
  public Double get_AVProductStatesIdentifier() {
    return AVProductStatesIdentifier;
  }
  public void set_AVProductStatesIdentifier(Double AVProductStatesIdentifier) {
    this.AVProductStatesIdentifier = AVProductStatesIdentifier;
  }
  public malware_prediction with_AVProductStatesIdentifier(Double AVProductStatesIdentifier) {
    this.AVProductStatesIdentifier = AVProductStatesIdentifier;
    return this;
  }
  private Double AVProductsInstalled;
  public Double get_AVProductsInstalled() {
    return AVProductsInstalled;
  }
  public void set_AVProductsInstalled(Double AVProductsInstalled) {
    this.AVProductsInstalled = AVProductsInstalled;
  }
  public malware_prediction with_AVProductsInstalled(Double AVProductsInstalled) {
    this.AVProductsInstalled = AVProductsInstalled;
    return this;
  }
  private Double AVProductsEnabled;
  public Double get_AVProductsEnabled() {
    return AVProductsEnabled;
  }
  public void set_AVProductsEnabled(Double AVProductsEnabled) {
    this.AVProductsEnabled = AVProductsEnabled;
  }
  public malware_prediction with_AVProductsEnabled(Double AVProductsEnabled) {
    this.AVProductsEnabled = AVProductsEnabled;
    return this;
  }
  private Double HasTpm;
  public Double get_HasTpm() {
    return HasTpm;
  }
  public void set_HasTpm(Double HasTpm) {
    this.HasTpm = HasTpm;
  }
  public malware_prediction with_HasTpm(Double HasTpm) {
    this.HasTpm = HasTpm;
    return this;
  }
  private String Platform;
  public String get_Platform() {
    return Platform;
  }
  public void set_Platform(String Platform) {
    this.Platform = Platform;
  }
  public malware_prediction with_Platform(String Platform) {
    this.Platform = Platform;
    return this;
  }
  private String Processor;
  public String get_Processor() {
    return Processor;
  }
  public void set_Processor(String Processor) {
    this.Processor = Processor;
  }
  public malware_prediction with_Processor(String Processor) {
    this.Processor = Processor;
    return this;
  }
  private String OsVer;
  public String get_OsVer() {
    return OsVer;
  }
  public void set_OsVer(String OsVer) {
    this.OsVer = OsVer;
  }
  public malware_prediction with_OsVer(String OsVer) {
    this.OsVer = OsVer;
    return this;
  }
  private Double OsBuild;
  public Double get_OsBuild() {
    return OsBuild;
  }
  public void set_OsBuild(Double OsBuild) {
    this.OsBuild = OsBuild;
  }
  public malware_prediction with_OsBuild(Double OsBuild) {
    this.OsBuild = OsBuild;
    return this;
  }
  private Double OsSuite;
  public Double get_OsSuite() {
    return OsSuite;
  }
  public void set_OsSuite(Double OsSuite) {
    this.OsSuite = OsSuite;
  }
  public malware_prediction with_OsSuite(Double OsSuite) {
    this.OsSuite = OsSuite;
    return this;
  }
  private String OsPlatformSubRelease;
  public String get_OsPlatformSubRelease() {
    return OsPlatformSubRelease;
  }
  public void set_OsPlatformSubRelease(String OsPlatformSubRelease) {
    this.OsPlatformSubRelease = OsPlatformSubRelease;
  }
  public malware_prediction with_OsPlatformSubRelease(String OsPlatformSubRelease) {
    this.OsPlatformSubRelease = OsPlatformSubRelease;
    return this;
  }
  private Double IsProtected;
  public Double get_IsProtected() {
    return IsProtected;
  }
  public void set_IsProtected(Double IsProtected) {
    this.IsProtected = IsProtected;
  }
  public malware_prediction with_IsProtected(Double IsProtected) {
    this.IsProtected = IsProtected;
    return this;
  }
  private Double Firewall;
  public Double get_Firewall() {
    return Firewall;
  }
  public void set_Firewall(Double Firewall) {
    this.Firewall = Firewall;
  }
  public malware_prediction with_Firewall(Double Firewall) {
    this.Firewall = Firewall;
    return this;
  }
  private Double UacLuaenable;
  public Double get_UacLuaenable() {
    return UacLuaenable;
  }
  public void set_UacLuaenable(Double UacLuaenable) {
    this.UacLuaenable = UacLuaenable;
  }
  public malware_prediction with_UacLuaenable(Double UacLuaenable) {
    this.UacLuaenable = UacLuaenable;
    return this;
  }
  private String Census_DeviceFamily;
  public String get_Census_DeviceFamily() {
    return Census_DeviceFamily;
  }
  public void set_Census_DeviceFamily(String Census_DeviceFamily) {
    this.Census_DeviceFamily = Census_DeviceFamily;
  }
  public malware_prediction with_Census_DeviceFamily(String Census_DeviceFamily) {
    this.Census_DeviceFamily = Census_DeviceFamily;
    return this;
  }
  private Double Census_ProcessorCoreCount;
  public Double get_Census_ProcessorCoreCount() {
    return Census_ProcessorCoreCount;
  }
  public void set_Census_ProcessorCoreCount(Double Census_ProcessorCoreCount) {
    this.Census_ProcessorCoreCount = Census_ProcessorCoreCount;
  }
  public malware_prediction with_Census_ProcessorCoreCount(Double Census_ProcessorCoreCount) {
    this.Census_ProcessorCoreCount = Census_ProcessorCoreCount;
    return this;
  }
  private Double Census_ProcessorManufacturerIdentifier;
  public Double get_Census_ProcessorManufacturerIdentifier() {
    return Census_ProcessorManufacturerIdentifier;
  }
  public void set_Census_ProcessorManufacturerIdentifier(Double Census_ProcessorManufacturerIdentifier) {
    this.Census_ProcessorManufacturerIdentifier = Census_ProcessorManufacturerIdentifier;
  }
  public malware_prediction with_Census_ProcessorManufacturerIdentifier(Double Census_ProcessorManufacturerIdentifier) {
    this.Census_ProcessorManufacturerIdentifier = Census_ProcessorManufacturerIdentifier;
    return this;
  }
  private Double Census_ProcessorModelIdentifier;
  public Double get_Census_ProcessorModelIdentifier() {
    return Census_ProcessorModelIdentifier;
  }
  public void set_Census_ProcessorModelIdentifier(Double Census_ProcessorModelIdentifier) {
    this.Census_ProcessorModelIdentifier = Census_ProcessorModelIdentifier;
  }
  public malware_prediction with_Census_ProcessorModelIdentifier(Double Census_ProcessorModelIdentifier) {
    this.Census_ProcessorModelIdentifier = Census_ProcessorModelIdentifier;
    return this;
  }
  private Double Census_PrimaryDiskTotalCapacity;
  public Double get_Census_PrimaryDiskTotalCapacity() {
    return Census_PrimaryDiskTotalCapacity;
  }
  public void set_Census_PrimaryDiskTotalCapacity(Double Census_PrimaryDiskTotalCapacity) {
    this.Census_PrimaryDiskTotalCapacity = Census_PrimaryDiskTotalCapacity;
  }
  public malware_prediction with_Census_PrimaryDiskTotalCapacity(Double Census_PrimaryDiskTotalCapacity) {
    this.Census_PrimaryDiskTotalCapacity = Census_PrimaryDiskTotalCapacity;
    return this;
  }
  private String Census_PrimaryDiskTypeName;
  public String get_Census_PrimaryDiskTypeName() {
    return Census_PrimaryDiskTypeName;
  }
  public void set_Census_PrimaryDiskTypeName(String Census_PrimaryDiskTypeName) {
    this.Census_PrimaryDiskTypeName = Census_PrimaryDiskTypeName;
  }
  public malware_prediction with_Census_PrimaryDiskTypeName(String Census_PrimaryDiskTypeName) {
    this.Census_PrimaryDiskTypeName = Census_PrimaryDiskTypeName;
    return this;
  }
  private Double Census_SystemVolumeTotalCapacity;
  public Double get_Census_SystemVolumeTotalCapacity() {
    return Census_SystemVolumeTotalCapacity;
  }
  public void set_Census_SystemVolumeTotalCapacity(Double Census_SystemVolumeTotalCapacity) {
    this.Census_SystemVolumeTotalCapacity = Census_SystemVolumeTotalCapacity;
  }
  public malware_prediction with_Census_SystemVolumeTotalCapacity(Double Census_SystemVolumeTotalCapacity) {
    this.Census_SystemVolumeTotalCapacity = Census_SystemVolumeTotalCapacity;
    return this;
  }
  private Integer Census_HasOpticalDiskDrive;
  public Integer get_Census_HasOpticalDiskDrive() {
    return Census_HasOpticalDiskDrive;
  }
  public void set_Census_HasOpticalDiskDrive(Integer Census_HasOpticalDiskDrive) {
    this.Census_HasOpticalDiskDrive = Census_HasOpticalDiskDrive;
  }
  public malware_prediction with_Census_HasOpticalDiskDrive(Integer Census_HasOpticalDiskDrive) {
    this.Census_HasOpticalDiskDrive = Census_HasOpticalDiskDrive;
    return this;
  }
  private Double Census_TotalPhysicalRAM;
  public Double get_Census_TotalPhysicalRAM() {
    return Census_TotalPhysicalRAM;
  }
  public void set_Census_TotalPhysicalRAM(Double Census_TotalPhysicalRAM) {
    this.Census_TotalPhysicalRAM = Census_TotalPhysicalRAM;
  }
  public malware_prediction with_Census_TotalPhysicalRAM(Double Census_TotalPhysicalRAM) {
    this.Census_TotalPhysicalRAM = Census_TotalPhysicalRAM;
    return this;
  }
  private String Census_PowerPlatformRoleName;
  public String get_Census_PowerPlatformRoleName() {
    return Census_PowerPlatformRoleName;
  }
  public void set_Census_PowerPlatformRoleName(String Census_PowerPlatformRoleName) {
    this.Census_PowerPlatformRoleName = Census_PowerPlatformRoleName;
  }
  public malware_prediction with_Census_PowerPlatformRoleName(String Census_PowerPlatformRoleName) {
    this.Census_PowerPlatformRoleName = Census_PowerPlatformRoleName;
    return this;
  }
  private Double Census_InternalBatteryNumberOfCharges;
  public Double get_Census_InternalBatteryNumberOfCharges() {
    return Census_InternalBatteryNumberOfCharges;
  }
  public void set_Census_InternalBatteryNumberOfCharges(Double Census_InternalBatteryNumberOfCharges) {
    this.Census_InternalBatteryNumberOfCharges = Census_InternalBatteryNumberOfCharges;
  }
  public malware_prediction with_Census_InternalBatteryNumberOfCharges(Double Census_InternalBatteryNumberOfCharges) {
    this.Census_InternalBatteryNumberOfCharges = Census_InternalBatteryNumberOfCharges;
    return this;
  }
  private String Census_OSArchitecture;
  public String get_Census_OSArchitecture() {
    return Census_OSArchitecture;
  }
  public void set_Census_OSArchitecture(String Census_OSArchitecture) {
    this.Census_OSArchitecture = Census_OSArchitecture;
  }
  public malware_prediction with_Census_OSArchitecture(String Census_OSArchitecture) {
    this.Census_OSArchitecture = Census_OSArchitecture;
    return this;
  }
  private String Census_OSEdition;
  public String get_Census_OSEdition() {
    return Census_OSEdition;
  }
  public void set_Census_OSEdition(String Census_OSEdition) {
    this.Census_OSEdition = Census_OSEdition;
  }
  public malware_prediction with_Census_OSEdition(String Census_OSEdition) {
    this.Census_OSEdition = Census_OSEdition;
    return this;
  }
  private String Census_OSWUAutoUpdateOptionsName;
  public String get_Census_OSWUAutoUpdateOptionsName() {
    return Census_OSWUAutoUpdateOptionsName;
  }
  public void set_Census_OSWUAutoUpdateOptionsName(String Census_OSWUAutoUpdateOptionsName) {
    this.Census_OSWUAutoUpdateOptionsName = Census_OSWUAutoUpdateOptionsName;
  }
  public malware_prediction with_Census_OSWUAutoUpdateOptionsName(String Census_OSWUAutoUpdateOptionsName) {
    this.Census_OSWUAutoUpdateOptionsName = Census_OSWUAutoUpdateOptionsName;
    return this;
  }
  private Integer Census_IsPortableOperatingSystem;
  public Integer get_Census_IsPortableOperatingSystem() {
    return Census_IsPortableOperatingSystem;
  }
  public void set_Census_IsPortableOperatingSystem(Integer Census_IsPortableOperatingSystem) {
    this.Census_IsPortableOperatingSystem = Census_IsPortableOperatingSystem;
  }
  public malware_prediction with_Census_IsPortableOperatingSystem(Integer Census_IsPortableOperatingSystem) {
    this.Census_IsPortableOperatingSystem = Census_IsPortableOperatingSystem;
    return this;
  }
  private Double Census_FirmwareManufacturerIdentifier;
  public Double get_Census_FirmwareManufacturerIdentifier() {
    return Census_FirmwareManufacturerIdentifier;
  }
  public void set_Census_FirmwareManufacturerIdentifier(Double Census_FirmwareManufacturerIdentifier) {
    this.Census_FirmwareManufacturerIdentifier = Census_FirmwareManufacturerIdentifier;
  }
  public malware_prediction with_Census_FirmwareManufacturerIdentifier(Double Census_FirmwareManufacturerIdentifier) {
    this.Census_FirmwareManufacturerIdentifier = Census_FirmwareManufacturerIdentifier;
    return this;
  }
  private Integer Census_IsSecureBootEnabled;
  public Integer get_Census_IsSecureBootEnabled() {
    return Census_IsSecureBootEnabled;
  }
  public void set_Census_IsSecureBootEnabled(Integer Census_IsSecureBootEnabled) {
    this.Census_IsSecureBootEnabled = Census_IsSecureBootEnabled;
  }
  public malware_prediction with_Census_IsSecureBootEnabled(Integer Census_IsSecureBootEnabled) {
    this.Census_IsSecureBootEnabled = Census_IsSecureBootEnabled;
    return this;
  }
  private Double Census_IsVirtualDevice;
  public Double get_Census_IsVirtualDevice() {
    return Census_IsVirtualDevice;
  }
  public void set_Census_IsVirtualDevice(Double Census_IsVirtualDevice) {
    this.Census_IsVirtualDevice = Census_IsVirtualDevice;
  }
  public malware_prediction with_Census_IsVirtualDevice(Double Census_IsVirtualDevice) {
    this.Census_IsVirtualDevice = Census_IsVirtualDevice;
    return this;
  }
  private Integer Census_IsTouchEnabled;
  public Integer get_Census_IsTouchEnabled() {
    return Census_IsTouchEnabled;
  }
  public void set_Census_IsTouchEnabled(Integer Census_IsTouchEnabled) {
    this.Census_IsTouchEnabled = Census_IsTouchEnabled;
  }
  public malware_prediction with_Census_IsTouchEnabled(Integer Census_IsTouchEnabled) {
    this.Census_IsTouchEnabled = Census_IsTouchEnabled;
    return this;
  }
  private Integer Census_IsPenCapable;
  public Integer get_Census_IsPenCapable() {
    return Census_IsPenCapable;
  }
  public void set_Census_IsPenCapable(Integer Census_IsPenCapable) {
    this.Census_IsPenCapable = Census_IsPenCapable;
  }
  public malware_prediction with_Census_IsPenCapable(Integer Census_IsPenCapable) {
    this.Census_IsPenCapable = Census_IsPenCapable;
    return this;
  }
  private Double Census_IsAlwaysOnAlwaysConnectedCapable;
  public Double get_Census_IsAlwaysOnAlwaysConnectedCapable() {
    return Census_IsAlwaysOnAlwaysConnectedCapable;
  }
  public void set_Census_IsAlwaysOnAlwaysConnectedCapable(Double Census_IsAlwaysOnAlwaysConnectedCapable) {
    this.Census_IsAlwaysOnAlwaysConnectedCapable = Census_IsAlwaysOnAlwaysConnectedCapable;
  }
  public malware_prediction with_Census_IsAlwaysOnAlwaysConnectedCapable(Double Census_IsAlwaysOnAlwaysConnectedCapable) {
    this.Census_IsAlwaysOnAlwaysConnectedCapable = Census_IsAlwaysOnAlwaysConnectedCapable;
    return this;
  }
  private Double Wdft_IsGamer;
  public Double get_Wdft_IsGamer() {
    return Wdft_IsGamer;
  }
  public void set_Wdft_IsGamer(Double Wdft_IsGamer) {
    this.Wdft_IsGamer = Wdft_IsGamer;
  }
  public malware_prediction with_Wdft_IsGamer(Double Wdft_IsGamer) {
    this.Wdft_IsGamer = Wdft_IsGamer;
    return this;
  }
  private Double Census_InternalPrimaryDiagonalDisplaySizeInInches;
  public Double get_Census_InternalPrimaryDiagonalDisplaySizeInInches() {
    return Census_InternalPrimaryDiagonalDisplaySizeInInches;
  }
  public void set_Census_InternalPrimaryDiagonalDisplaySizeInInches(Double Census_InternalPrimaryDiagonalDisplaySizeInInches) {
    this.Census_InternalPrimaryDiagonalDisplaySizeInInches = Census_InternalPrimaryDiagonalDisplaySizeInInches;
  }
  public malware_prediction with_Census_InternalPrimaryDiagonalDisplaySizeInInches(Double Census_InternalPrimaryDiagonalDisplaySizeInInches) {
    this.Census_InternalPrimaryDiagonalDisplaySizeInInches = Census_InternalPrimaryDiagonalDisplaySizeInInches;
    return this;
  }
  private String Census_MDC2FormFactor;
  public String get_Census_MDC2FormFactor() {
    return Census_MDC2FormFactor;
  }
  public void set_Census_MDC2FormFactor(String Census_MDC2FormFactor) {
    this.Census_MDC2FormFactor = Census_MDC2FormFactor;
  }
  public malware_prediction with_Census_MDC2FormFactor(String Census_MDC2FormFactor) {
    this.Census_MDC2FormFactor = Census_MDC2FormFactor;
    return this;
  }
  private String Census_OSSkuName;
  public String get_Census_OSSkuName() {
    return Census_OSSkuName;
  }
  public void set_Census_OSSkuName(String Census_OSSkuName) {
    this.Census_OSSkuName = Census_OSSkuName;
  }
  public malware_prediction with_Census_OSSkuName(String Census_OSSkuName) {
    this.Census_OSSkuName = Census_OSSkuName;
    return this;
  }
  private String SkuEdition;
  public String get_SkuEdition() {
    return SkuEdition;
  }
  public void set_SkuEdition(String SkuEdition) {
    this.SkuEdition = SkuEdition;
  }
  public malware_prediction with_SkuEdition(String SkuEdition) {
    this.SkuEdition = SkuEdition;
    return this;
  }
  private String ProductName;
  public String get_ProductName() {
    return ProductName;
  }
  public void set_ProductName(String ProductName) {
    this.ProductName = ProductName;
  }
  public malware_prediction with_ProductName(String ProductName) {
    this.ProductName = ProductName;
    return this;
  }
  private Integer HasDetections;
  public Integer get_HasDetections() {
    return HasDetections;
  }
  public void set_HasDetections(Integer HasDetections) {
    this.HasDetections = HasDetections;
  }
  public malware_prediction with_HasDetections(Integer HasDetections) {
    this.HasDetections = HasDetections;
    return this;
  }
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof malware_prediction)) {
      return false;
    }
    malware_prediction that = (malware_prediction) o;
    boolean equal = true;
    equal = equal && (this.MachineId == null ? that.MachineId == null : this.MachineId.equals(that.MachineId));
    equal = equal && (this.IsBeta == null ? that.IsBeta == null : this.IsBeta.equals(that.IsBeta));
    equal = equal && (this.AVProductStatesIdentifier == null ? that.AVProductStatesIdentifier == null : this.AVProductStatesIdentifier.equals(that.AVProductStatesIdentifier));
    equal = equal && (this.AVProductsInstalled == null ? that.AVProductsInstalled == null : this.AVProductsInstalled.equals(that.AVProductsInstalled));
    equal = equal && (this.AVProductsEnabled == null ? that.AVProductsEnabled == null : this.AVProductsEnabled.equals(that.AVProductsEnabled));
    equal = equal && (this.HasTpm == null ? that.HasTpm == null : this.HasTpm.equals(that.HasTpm));
    equal = equal && (this.Platform == null ? that.Platform == null : this.Platform.equals(that.Platform));
    equal = equal && (this.Processor == null ? that.Processor == null : this.Processor.equals(that.Processor));
    equal = equal && (this.OsVer == null ? that.OsVer == null : this.OsVer.equals(that.OsVer));
    equal = equal && (this.OsBuild == null ? that.OsBuild == null : this.OsBuild.equals(that.OsBuild));
    equal = equal && (this.OsSuite == null ? that.OsSuite == null : this.OsSuite.equals(that.OsSuite));
    equal = equal && (this.OsPlatformSubRelease == null ? that.OsPlatformSubRelease == null : this.OsPlatformSubRelease.equals(that.OsPlatformSubRelease));
    equal = equal && (this.IsProtected == null ? that.IsProtected == null : this.IsProtected.equals(that.IsProtected));
    equal = equal && (this.Firewall == null ? that.Firewall == null : this.Firewall.equals(that.Firewall));
    equal = equal && (this.UacLuaenable == null ? that.UacLuaenable == null : this.UacLuaenable.equals(that.UacLuaenable));
    equal = equal && (this.Census_DeviceFamily == null ? that.Census_DeviceFamily == null : this.Census_DeviceFamily.equals(that.Census_DeviceFamily));
    equal = equal && (this.Census_ProcessorCoreCount == null ? that.Census_ProcessorCoreCount == null : this.Census_ProcessorCoreCount.equals(that.Census_ProcessorCoreCount));
    equal = equal && (this.Census_ProcessorManufacturerIdentifier == null ? that.Census_ProcessorManufacturerIdentifier == null : this.Census_ProcessorManufacturerIdentifier.equals(that.Census_ProcessorManufacturerIdentifier));
    equal = equal && (this.Census_ProcessorModelIdentifier == null ? that.Census_ProcessorModelIdentifier == null : this.Census_ProcessorModelIdentifier.equals(that.Census_ProcessorModelIdentifier));
    equal = equal && (this.Census_PrimaryDiskTotalCapacity == null ? that.Census_PrimaryDiskTotalCapacity == null : this.Census_PrimaryDiskTotalCapacity.equals(that.Census_PrimaryDiskTotalCapacity));
    equal = equal && (this.Census_PrimaryDiskTypeName == null ? that.Census_PrimaryDiskTypeName == null : this.Census_PrimaryDiskTypeName.equals(that.Census_PrimaryDiskTypeName));
    equal = equal && (this.Census_SystemVolumeTotalCapacity == null ? that.Census_SystemVolumeTotalCapacity == null : this.Census_SystemVolumeTotalCapacity.equals(that.Census_SystemVolumeTotalCapacity));
    equal = equal && (this.Census_HasOpticalDiskDrive == null ? that.Census_HasOpticalDiskDrive == null : this.Census_HasOpticalDiskDrive.equals(that.Census_HasOpticalDiskDrive));
    equal = equal && (this.Census_TotalPhysicalRAM == null ? that.Census_TotalPhysicalRAM == null : this.Census_TotalPhysicalRAM.equals(that.Census_TotalPhysicalRAM));
    equal = equal && (this.Census_PowerPlatformRoleName == null ? that.Census_PowerPlatformRoleName == null : this.Census_PowerPlatformRoleName.equals(that.Census_PowerPlatformRoleName));
    equal = equal && (this.Census_InternalBatteryNumberOfCharges == null ? that.Census_InternalBatteryNumberOfCharges == null : this.Census_InternalBatteryNumberOfCharges.equals(that.Census_InternalBatteryNumberOfCharges));
    equal = equal && (this.Census_OSArchitecture == null ? that.Census_OSArchitecture == null : this.Census_OSArchitecture.equals(that.Census_OSArchitecture));
    equal = equal && (this.Census_OSEdition == null ? that.Census_OSEdition == null : this.Census_OSEdition.equals(that.Census_OSEdition));
    equal = equal && (this.Census_OSWUAutoUpdateOptionsName == null ? that.Census_OSWUAutoUpdateOptionsName == null : this.Census_OSWUAutoUpdateOptionsName.equals(that.Census_OSWUAutoUpdateOptionsName));
    equal = equal && (this.Census_IsPortableOperatingSystem == null ? that.Census_IsPortableOperatingSystem == null : this.Census_IsPortableOperatingSystem.equals(that.Census_IsPortableOperatingSystem));
    equal = equal && (this.Census_FirmwareManufacturerIdentifier == null ? that.Census_FirmwareManufacturerIdentifier == null : this.Census_FirmwareManufacturerIdentifier.equals(that.Census_FirmwareManufacturerIdentifier));
    equal = equal && (this.Census_IsSecureBootEnabled == null ? that.Census_IsSecureBootEnabled == null : this.Census_IsSecureBootEnabled.equals(that.Census_IsSecureBootEnabled));
    equal = equal && (this.Census_IsVirtualDevice == null ? that.Census_IsVirtualDevice == null : this.Census_IsVirtualDevice.equals(that.Census_IsVirtualDevice));
    equal = equal && (this.Census_IsTouchEnabled == null ? that.Census_IsTouchEnabled == null : this.Census_IsTouchEnabled.equals(that.Census_IsTouchEnabled));
    equal = equal && (this.Census_IsPenCapable == null ? that.Census_IsPenCapable == null : this.Census_IsPenCapable.equals(that.Census_IsPenCapable));
    equal = equal && (this.Census_IsAlwaysOnAlwaysConnectedCapable == null ? that.Census_IsAlwaysOnAlwaysConnectedCapable == null : this.Census_IsAlwaysOnAlwaysConnectedCapable.equals(that.Census_IsAlwaysOnAlwaysConnectedCapable));
    equal = equal && (this.Wdft_IsGamer == null ? that.Wdft_IsGamer == null : this.Wdft_IsGamer.equals(that.Wdft_IsGamer));
    equal = equal && (this.Census_InternalPrimaryDiagonalDisplaySizeInInches == null ? that.Census_InternalPrimaryDiagonalDisplaySizeInInches == null : this.Census_InternalPrimaryDiagonalDisplaySizeInInches.equals(that.Census_InternalPrimaryDiagonalDisplaySizeInInches));
    equal = equal && (this.Census_MDC2FormFactor == null ? that.Census_MDC2FormFactor == null : this.Census_MDC2FormFactor.equals(that.Census_MDC2FormFactor));
    equal = equal && (this.Census_OSSkuName == null ? that.Census_OSSkuName == null : this.Census_OSSkuName.equals(that.Census_OSSkuName));
    equal = equal && (this.SkuEdition == null ? that.SkuEdition == null : this.SkuEdition.equals(that.SkuEdition));
    equal = equal && (this.ProductName == null ? that.ProductName == null : this.ProductName.equals(that.ProductName));
    equal = equal && (this.HasDetections == null ? that.HasDetections == null : this.HasDetections.equals(that.HasDetections));
    return equal;
  }
  public boolean equals0(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof malware_prediction)) {
      return false;
    }
    malware_prediction that = (malware_prediction) o;
    boolean equal = true;
    equal = equal && (this.MachineId == null ? that.MachineId == null : this.MachineId.equals(that.MachineId));
    equal = equal && (this.IsBeta == null ? that.IsBeta == null : this.IsBeta.equals(that.IsBeta));
    equal = equal && (this.AVProductStatesIdentifier == null ? that.AVProductStatesIdentifier == null : this.AVProductStatesIdentifier.equals(that.AVProductStatesIdentifier));
    equal = equal && (this.AVProductsInstalled == null ? that.AVProductsInstalled == null : this.AVProductsInstalled.equals(that.AVProductsInstalled));
    equal = equal && (this.AVProductsEnabled == null ? that.AVProductsEnabled == null : this.AVProductsEnabled.equals(that.AVProductsEnabled));
    equal = equal && (this.HasTpm == null ? that.HasTpm == null : this.HasTpm.equals(that.HasTpm));
    equal = equal && (this.Platform == null ? that.Platform == null : this.Platform.equals(that.Platform));
    equal = equal && (this.Processor == null ? that.Processor == null : this.Processor.equals(that.Processor));
    equal = equal && (this.OsVer == null ? that.OsVer == null : this.OsVer.equals(that.OsVer));
    equal = equal && (this.OsBuild == null ? that.OsBuild == null : this.OsBuild.equals(that.OsBuild));
    equal = equal && (this.OsSuite == null ? that.OsSuite == null : this.OsSuite.equals(that.OsSuite));
    equal = equal && (this.OsPlatformSubRelease == null ? that.OsPlatformSubRelease == null : this.OsPlatformSubRelease.equals(that.OsPlatformSubRelease));
    equal = equal && (this.IsProtected == null ? that.IsProtected == null : this.IsProtected.equals(that.IsProtected));
    equal = equal && (this.Firewall == null ? that.Firewall == null : this.Firewall.equals(that.Firewall));
    equal = equal && (this.UacLuaenable == null ? that.UacLuaenable == null : this.UacLuaenable.equals(that.UacLuaenable));
    equal = equal && (this.Census_DeviceFamily == null ? that.Census_DeviceFamily == null : this.Census_DeviceFamily.equals(that.Census_DeviceFamily));
    equal = equal && (this.Census_ProcessorCoreCount == null ? that.Census_ProcessorCoreCount == null : this.Census_ProcessorCoreCount.equals(that.Census_ProcessorCoreCount));
    equal = equal && (this.Census_ProcessorManufacturerIdentifier == null ? that.Census_ProcessorManufacturerIdentifier == null : this.Census_ProcessorManufacturerIdentifier.equals(that.Census_ProcessorManufacturerIdentifier));
    equal = equal && (this.Census_ProcessorModelIdentifier == null ? that.Census_ProcessorModelIdentifier == null : this.Census_ProcessorModelIdentifier.equals(that.Census_ProcessorModelIdentifier));
    equal = equal && (this.Census_PrimaryDiskTotalCapacity == null ? that.Census_PrimaryDiskTotalCapacity == null : this.Census_PrimaryDiskTotalCapacity.equals(that.Census_PrimaryDiskTotalCapacity));
    equal = equal && (this.Census_PrimaryDiskTypeName == null ? that.Census_PrimaryDiskTypeName == null : this.Census_PrimaryDiskTypeName.equals(that.Census_PrimaryDiskTypeName));
    equal = equal && (this.Census_SystemVolumeTotalCapacity == null ? that.Census_SystemVolumeTotalCapacity == null : this.Census_SystemVolumeTotalCapacity.equals(that.Census_SystemVolumeTotalCapacity));
    equal = equal && (this.Census_HasOpticalDiskDrive == null ? that.Census_HasOpticalDiskDrive == null : this.Census_HasOpticalDiskDrive.equals(that.Census_HasOpticalDiskDrive));
    equal = equal && (this.Census_TotalPhysicalRAM == null ? that.Census_TotalPhysicalRAM == null : this.Census_TotalPhysicalRAM.equals(that.Census_TotalPhysicalRAM));
    equal = equal && (this.Census_PowerPlatformRoleName == null ? that.Census_PowerPlatformRoleName == null : this.Census_PowerPlatformRoleName.equals(that.Census_PowerPlatformRoleName));
    equal = equal && (this.Census_InternalBatteryNumberOfCharges == null ? that.Census_InternalBatteryNumberOfCharges == null : this.Census_InternalBatteryNumberOfCharges.equals(that.Census_InternalBatteryNumberOfCharges));
    equal = equal && (this.Census_OSArchitecture == null ? that.Census_OSArchitecture == null : this.Census_OSArchitecture.equals(that.Census_OSArchitecture));
    equal = equal && (this.Census_OSEdition == null ? that.Census_OSEdition == null : this.Census_OSEdition.equals(that.Census_OSEdition));
    equal = equal && (this.Census_OSWUAutoUpdateOptionsName == null ? that.Census_OSWUAutoUpdateOptionsName == null : this.Census_OSWUAutoUpdateOptionsName.equals(that.Census_OSWUAutoUpdateOptionsName));
    equal = equal && (this.Census_IsPortableOperatingSystem == null ? that.Census_IsPortableOperatingSystem == null : this.Census_IsPortableOperatingSystem.equals(that.Census_IsPortableOperatingSystem));
    equal = equal && (this.Census_FirmwareManufacturerIdentifier == null ? that.Census_FirmwareManufacturerIdentifier == null : this.Census_FirmwareManufacturerIdentifier.equals(that.Census_FirmwareManufacturerIdentifier));
    equal = equal && (this.Census_IsSecureBootEnabled == null ? that.Census_IsSecureBootEnabled == null : this.Census_IsSecureBootEnabled.equals(that.Census_IsSecureBootEnabled));
    equal = equal && (this.Census_IsVirtualDevice == null ? that.Census_IsVirtualDevice == null : this.Census_IsVirtualDevice.equals(that.Census_IsVirtualDevice));
    equal = equal && (this.Census_IsTouchEnabled == null ? that.Census_IsTouchEnabled == null : this.Census_IsTouchEnabled.equals(that.Census_IsTouchEnabled));
    equal = equal && (this.Census_IsPenCapable == null ? that.Census_IsPenCapable == null : this.Census_IsPenCapable.equals(that.Census_IsPenCapable));
    equal = equal && (this.Census_IsAlwaysOnAlwaysConnectedCapable == null ? that.Census_IsAlwaysOnAlwaysConnectedCapable == null : this.Census_IsAlwaysOnAlwaysConnectedCapable.equals(that.Census_IsAlwaysOnAlwaysConnectedCapable));
    equal = equal && (this.Wdft_IsGamer == null ? that.Wdft_IsGamer == null : this.Wdft_IsGamer.equals(that.Wdft_IsGamer));
    equal = equal && (this.Census_InternalPrimaryDiagonalDisplaySizeInInches == null ? that.Census_InternalPrimaryDiagonalDisplaySizeInInches == null : this.Census_InternalPrimaryDiagonalDisplaySizeInInches.equals(that.Census_InternalPrimaryDiagonalDisplaySizeInInches));
    equal = equal && (this.Census_MDC2FormFactor == null ? that.Census_MDC2FormFactor == null : this.Census_MDC2FormFactor.equals(that.Census_MDC2FormFactor));
    equal = equal && (this.Census_OSSkuName == null ? that.Census_OSSkuName == null : this.Census_OSSkuName.equals(that.Census_OSSkuName));
    equal = equal && (this.SkuEdition == null ? that.SkuEdition == null : this.SkuEdition.equals(that.SkuEdition));
    equal = equal && (this.ProductName == null ? that.ProductName == null : this.ProductName.equals(that.ProductName));
    equal = equal && (this.HasDetections == null ? that.HasDetections == null : this.HasDetections.equals(that.HasDetections));
    return equal;
  }
  public void readFields(ResultSet __dbResults) throws SQLException {
    this.__cur_result_set = __dbResults;
    this.MachineId = JdbcWritableBridge.readInteger(1, __dbResults);
    this.IsBeta = JdbcWritableBridge.readInteger(2, __dbResults);
    this.AVProductStatesIdentifier = JdbcWritableBridge.readDouble(3, __dbResults);
    this.AVProductsInstalled = JdbcWritableBridge.readDouble(4, __dbResults);
    this.AVProductsEnabled = JdbcWritableBridge.readDouble(5, __dbResults);
    this.HasTpm = JdbcWritableBridge.readDouble(6, __dbResults);
    this.Platform = JdbcWritableBridge.readString(7, __dbResults);
    this.Processor = JdbcWritableBridge.readString(8, __dbResults);
    this.OsVer = JdbcWritableBridge.readString(9, __dbResults);
    this.OsBuild = JdbcWritableBridge.readDouble(10, __dbResults);
    this.OsSuite = JdbcWritableBridge.readDouble(11, __dbResults);
    this.OsPlatformSubRelease = JdbcWritableBridge.readString(12, __dbResults);
    this.IsProtected = JdbcWritableBridge.readDouble(13, __dbResults);
    this.Firewall = JdbcWritableBridge.readDouble(14, __dbResults);
    this.UacLuaenable = JdbcWritableBridge.readDouble(15, __dbResults);
    this.Census_DeviceFamily = JdbcWritableBridge.readString(16, __dbResults);
    this.Census_ProcessorCoreCount = JdbcWritableBridge.readDouble(17, __dbResults);
    this.Census_ProcessorManufacturerIdentifier = JdbcWritableBridge.readDouble(18, __dbResults);
    this.Census_ProcessorModelIdentifier = JdbcWritableBridge.readDouble(19, __dbResults);
    this.Census_PrimaryDiskTotalCapacity = JdbcWritableBridge.readDouble(20, __dbResults);
    this.Census_PrimaryDiskTypeName = JdbcWritableBridge.readString(21, __dbResults);
    this.Census_SystemVolumeTotalCapacity = JdbcWritableBridge.readDouble(22, __dbResults);
    this.Census_HasOpticalDiskDrive = JdbcWritableBridge.readInteger(23, __dbResults);
    this.Census_TotalPhysicalRAM = JdbcWritableBridge.readDouble(24, __dbResults);
    this.Census_PowerPlatformRoleName = JdbcWritableBridge.readString(25, __dbResults);
    this.Census_InternalBatteryNumberOfCharges = JdbcWritableBridge.readDouble(26, __dbResults);
    this.Census_OSArchitecture = JdbcWritableBridge.readString(27, __dbResults);
    this.Census_OSEdition = JdbcWritableBridge.readString(28, __dbResults);
    this.Census_OSWUAutoUpdateOptionsName = JdbcWritableBridge.readString(29, __dbResults);
    this.Census_IsPortableOperatingSystem = JdbcWritableBridge.readInteger(30, __dbResults);
    this.Census_FirmwareManufacturerIdentifier = JdbcWritableBridge.readDouble(31, __dbResults);
    this.Census_IsSecureBootEnabled = JdbcWritableBridge.readInteger(32, __dbResults);
    this.Census_IsVirtualDevice = JdbcWritableBridge.readDouble(33, __dbResults);
    this.Census_IsTouchEnabled = JdbcWritableBridge.readInteger(34, __dbResults);
    this.Census_IsPenCapable = JdbcWritableBridge.readInteger(35, __dbResults);
    this.Census_IsAlwaysOnAlwaysConnectedCapable = JdbcWritableBridge.readDouble(36, __dbResults);
    this.Wdft_IsGamer = JdbcWritableBridge.readDouble(37, __dbResults);
    this.Census_InternalPrimaryDiagonalDisplaySizeInInches = JdbcWritableBridge.readDouble(38, __dbResults);
    this.Census_MDC2FormFactor = JdbcWritableBridge.readString(39, __dbResults);
    this.Census_OSSkuName = JdbcWritableBridge.readString(40, __dbResults);
    this.SkuEdition = JdbcWritableBridge.readString(41, __dbResults);
    this.ProductName = JdbcWritableBridge.readString(42, __dbResults);
    this.HasDetections = JdbcWritableBridge.readInteger(43, __dbResults);
  }
  public void readFields0(ResultSet __dbResults) throws SQLException {
    this.MachineId = JdbcWritableBridge.readInteger(1, __dbResults);
    this.IsBeta = JdbcWritableBridge.readInteger(2, __dbResults);
    this.AVProductStatesIdentifier = JdbcWritableBridge.readDouble(3, __dbResults);
    this.AVProductsInstalled = JdbcWritableBridge.readDouble(4, __dbResults);
    this.AVProductsEnabled = JdbcWritableBridge.readDouble(5, __dbResults);
    this.HasTpm = JdbcWritableBridge.readDouble(6, __dbResults);
    this.Platform = JdbcWritableBridge.readString(7, __dbResults);
    this.Processor = JdbcWritableBridge.readString(8, __dbResults);
    this.OsVer = JdbcWritableBridge.readString(9, __dbResults);
    this.OsBuild = JdbcWritableBridge.readDouble(10, __dbResults);
    this.OsSuite = JdbcWritableBridge.readDouble(11, __dbResults);
    this.OsPlatformSubRelease = JdbcWritableBridge.readString(12, __dbResults);
    this.IsProtected = JdbcWritableBridge.readDouble(13, __dbResults);
    this.Firewall = JdbcWritableBridge.readDouble(14, __dbResults);
    this.UacLuaenable = JdbcWritableBridge.readDouble(15, __dbResults);
    this.Census_DeviceFamily = JdbcWritableBridge.readString(16, __dbResults);
    this.Census_ProcessorCoreCount = JdbcWritableBridge.readDouble(17, __dbResults);
    this.Census_ProcessorManufacturerIdentifier = JdbcWritableBridge.readDouble(18, __dbResults);
    this.Census_ProcessorModelIdentifier = JdbcWritableBridge.readDouble(19, __dbResults);
    this.Census_PrimaryDiskTotalCapacity = JdbcWritableBridge.readDouble(20, __dbResults);
    this.Census_PrimaryDiskTypeName = JdbcWritableBridge.readString(21, __dbResults);
    this.Census_SystemVolumeTotalCapacity = JdbcWritableBridge.readDouble(22, __dbResults);
    this.Census_HasOpticalDiskDrive = JdbcWritableBridge.readInteger(23, __dbResults);
    this.Census_TotalPhysicalRAM = JdbcWritableBridge.readDouble(24, __dbResults);
    this.Census_PowerPlatformRoleName = JdbcWritableBridge.readString(25, __dbResults);
    this.Census_InternalBatteryNumberOfCharges = JdbcWritableBridge.readDouble(26, __dbResults);
    this.Census_OSArchitecture = JdbcWritableBridge.readString(27, __dbResults);
    this.Census_OSEdition = JdbcWritableBridge.readString(28, __dbResults);
    this.Census_OSWUAutoUpdateOptionsName = JdbcWritableBridge.readString(29, __dbResults);
    this.Census_IsPortableOperatingSystem = JdbcWritableBridge.readInteger(30, __dbResults);
    this.Census_FirmwareManufacturerIdentifier = JdbcWritableBridge.readDouble(31, __dbResults);
    this.Census_IsSecureBootEnabled = JdbcWritableBridge.readInteger(32, __dbResults);
    this.Census_IsVirtualDevice = JdbcWritableBridge.readDouble(33, __dbResults);
    this.Census_IsTouchEnabled = JdbcWritableBridge.readInteger(34, __dbResults);
    this.Census_IsPenCapable = JdbcWritableBridge.readInteger(35, __dbResults);
    this.Census_IsAlwaysOnAlwaysConnectedCapable = JdbcWritableBridge.readDouble(36, __dbResults);
    this.Wdft_IsGamer = JdbcWritableBridge.readDouble(37, __dbResults);
    this.Census_InternalPrimaryDiagonalDisplaySizeInInches = JdbcWritableBridge.readDouble(38, __dbResults);
    this.Census_MDC2FormFactor = JdbcWritableBridge.readString(39, __dbResults);
    this.Census_OSSkuName = JdbcWritableBridge.readString(40, __dbResults);
    this.SkuEdition = JdbcWritableBridge.readString(41, __dbResults);
    this.ProductName = JdbcWritableBridge.readString(42, __dbResults);
    this.HasDetections = JdbcWritableBridge.readInteger(43, __dbResults);
  }
  public void loadLargeObjects(LargeObjectLoader __loader)
      throws SQLException, IOException, InterruptedException {
  }
  public void loadLargeObjects0(LargeObjectLoader __loader)
      throws SQLException, IOException, InterruptedException {
  }
  public void write(PreparedStatement __dbStmt) throws SQLException {
    write(__dbStmt, 0);
  }

  public int write(PreparedStatement __dbStmt, int __off) throws SQLException {
    JdbcWritableBridge.writeInteger(MachineId, 1 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(IsBeta, 2 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeDouble(AVProductStatesIdentifier, 3 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(AVProductsInstalled, 4 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(AVProductsEnabled, 5 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(HasTpm, 6 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(Platform, 7 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(Processor, 8 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(OsVer, 9 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeDouble(OsBuild, 10 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(OsSuite, 11 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(OsPlatformSubRelease, 12 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeDouble(IsProtected, 13 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(Firewall, 14 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(UacLuaenable, 15 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(Census_DeviceFamily, 16 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_ProcessorCoreCount, 17 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_ProcessorManufacturerIdentifier, 18 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_ProcessorModelIdentifier, 19 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_PrimaryDiskTotalCapacity, 20 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(Census_PrimaryDiskTypeName, 21 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_SystemVolumeTotalCapacity, 22 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeInteger(Census_HasOpticalDiskDrive, 23 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_TotalPhysicalRAM, 24 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(Census_PowerPlatformRoleName, 25 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_InternalBatteryNumberOfCharges, 26 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(Census_OSArchitecture, 27 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(Census_OSEdition, 28 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(Census_OSWUAutoUpdateOptionsName, 29 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(Census_IsPortableOperatingSystem, 30 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_FirmwareManufacturerIdentifier, 31 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeInteger(Census_IsSecureBootEnabled, 32 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_IsVirtualDevice, 33 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeInteger(Census_IsTouchEnabled, 34 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(Census_IsPenCapable, 35 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_IsAlwaysOnAlwaysConnectedCapable, 36 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(Wdft_IsGamer, 37 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_InternalPrimaryDiagonalDisplaySizeInInches, 38 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(Census_MDC2FormFactor, 39 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(Census_OSSkuName, 40 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SkuEdition, 41 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(ProductName, 42 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(HasDetections, 43 + __off, 4, __dbStmt);
    return 43;
  }
  public void write0(PreparedStatement __dbStmt, int __off) throws SQLException {
    JdbcWritableBridge.writeInteger(MachineId, 1 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(IsBeta, 2 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeDouble(AVProductStatesIdentifier, 3 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(AVProductsInstalled, 4 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(AVProductsEnabled, 5 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(HasTpm, 6 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(Platform, 7 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(Processor, 8 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(OsVer, 9 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeDouble(OsBuild, 10 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(OsSuite, 11 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(OsPlatformSubRelease, 12 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeDouble(IsProtected, 13 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(Firewall, 14 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(UacLuaenable, 15 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(Census_DeviceFamily, 16 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_ProcessorCoreCount, 17 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_ProcessorManufacturerIdentifier, 18 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_ProcessorModelIdentifier, 19 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_PrimaryDiskTotalCapacity, 20 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(Census_PrimaryDiskTypeName, 21 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_SystemVolumeTotalCapacity, 22 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeInteger(Census_HasOpticalDiskDrive, 23 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_TotalPhysicalRAM, 24 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(Census_PowerPlatformRoleName, 25 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_InternalBatteryNumberOfCharges, 26 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(Census_OSArchitecture, 27 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(Census_OSEdition, 28 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(Census_OSWUAutoUpdateOptionsName, 29 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(Census_IsPortableOperatingSystem, 30 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_FirmwareManufacturerIdentifier, 31 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeInteger(Census_IsSecureBootEnabled, 32 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_IsVirtualDevice, 33 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeInteger(Census_IsTouchEnabled, 34 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeInteger(Census_IsPenCapable, 35 + __off, 4, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_IsAlwaysOnAlwaysConnectedCapable, 36 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(Wdft_IsGamer, 37 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeDouble(Census_InternalPrimaryDiagonalDisplaySizeInInches, 38 + __off, 8, __dbStmt);
    JdbcWritableBridge.writeString(Census_MDC2FormFactor, 39 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(Census_OSSkuName, 40 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(SkuEdition, 41 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeString(ProductName, 42 + __off, 12, __dbStmt);
    JdbcWritableBridge.writeInteger(HasDetections, 43 + __off, 4, __dbStmt);
  }
  public void readFields(DataInput __dataIn) throws IOException {
this.readFields0(__dataIn);  }
  public void readFields0(DataInput __dataIn) throws IOException {
    if (__dataIn.readBoolean()) { 
        this.MachineId = null;
    } else {
    this.MachineId = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.IsBeta = null;
    } else {
    this.IsBeta = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.AVProductStatesIdentifier = null;
    } else {
    this.AVProductStatesIdentifier = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.AVProductsInstalled = null;
    } else {
    this.AVProductsInstalled = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.AVProductsEnabled = null;
    } else {
    this.AVProductsEnabled = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.HasTpm = null;
    } else {
    this.HasTpm = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Platform = null;
    } else {
    this.Platform = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.Processor = null;
    } else {
    this.Processor = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.OsVer = null;
    } else {
    this.OsVer = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.OsBuild = null;
    } else {
    this.OsBuild = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.OsSuite = null;
    } else {
    this.OsSuite = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.OsPlatformSubRelease = null;
    } else {
    this.OsPlatformSubRelease = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.IsProtected = null;
    } else {
    this.IsProtected = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Firewall = null;
    } else {
    this.Firewall = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.UacLuaenable = null;
    } else {
    this.UacLuaenable = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_DeviceFamily = null;
    } else {
    this.Census_DeviceFamily = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.Census_ProcessorCoreCount = null;
    } else {
    this.Census_ProcessorCoreCount = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_ProcessorManufacturerIdentifier = null;
    } else {
    this.Census_ProcessorManufacturerIdentifier = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_ProcessorModelIdentifier = null;
    } else {
    this.Census_ProcessorModelIdentifier = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_PrimaryDiskTotalCapacity = null;
    } else {
    this.Census_PrimaryDiskTotalCapacity = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_PrimaryDiskTypeName = null;
    } else {
    this.Census_PrimaryDiskTypeName = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.Census_SystemVolumeTotalCapacity = null;
    } else {
    this.Census_SystemVolumeTotalCapacity = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_HasOpticalDiskDrive = null;
    } else {
    this.Census_HasOpticalDiskDrive = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_TotalPhysicalRAM = null;
    } else {
    this.Census_TotalPhysicalRAM = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_PowerPlatformRoleName = null;
    } else {
    this.Census_PowerPlatformRoleName = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.Census_InternalBatteryNumberOfCharges = null;
    } else {
    this.Census_InternalBatteryNumberOfCharges = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_OSArchitecture = null;
    } else {
    this.Census_OSArchitecture = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.Census_OSEdition = null;
    } else {
    this.Census_OSEdition = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.Census_OSWUAutoUpdateOptionsName = null;
    } else {
    this.Census_OSWUAutoUpdateOptionsName = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.Census_IsPortableOperatingSystem = null;
    } else {
    this.Census_IsPortableOperatingSystem = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_FirmwareManufacturerIdentifier = null;
    } else {
    this.Census_FirmwareManufacturerIdentifier = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_IsSecureBootEnabled = null;
    } else {
    this.Census_IsSecureBootEnabled = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_IsVirtualDevice = null;
    } else {
    this.Census_IsVirtualDevice = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_IsTouchEnabled = null;
    } else {
    this.Census_IsTouchEnabled = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_IsPenCapable = null;
    } else {
    this.Census_IsPenCapable = Integer.valueOf(__dataIn.readInt());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_IsAlwaysOnAlwaysConnectedCapable = null;
    } else {
    this.Census_IsAlwaysOnAlwaysConnectedCapable = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Wdft_IsGamer = null;
    } else {
    this.Wdft_IsGamer = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_InternalPrimaryDiagonalDisplaySizeInInches = null;
    } else {
    this.Census_InternalPrimaryDiagonalDisplaySizeInInches = Double.valueOf(__dataIn.readDouble());
    }
    if (__dataIn.readBoolean()) { 
        this.Census_MDC2FormFactor = null;
    } else {
    this.Census_MDC2FormFactor = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.Census_OSSkuName = null;
    } else {
    this.Census_OSSkuName = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.SkuEdition = null;
    } else {
    this.SkuEdition = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.ProductName = null;
    } else {
    this.ProductName = Text.readString(__dataIn);
    }
    if (__dataIn.readBoolean()) { 
        this.HasDetections = null;
    } else {
    this.HasDetections = Integer.valueOf(__dataIn.readInt());
    }
  }
  public void write(DataOutput __dataOut) throws IOException {
    if (null == this.MachineId) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.MachineId);
    }
    if (null == this.IsBeta) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.IsBeta);
    }
    if (null == this.AVProductStatesIdentifier) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.AVProductStatesIdentifier);
    }
    if (null == this.AVProductsInstalled) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.AVProductsInstalled);
    }
    if (null == this.AVProductsEnabled) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.AVProductsEnabled);
    }
    if (null == this.HasTpm) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.HasTpm);
    }
    if (null == this.Platform) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Platform);
    }
    if (null == this.Processor) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Processor);
    }
    if (null == this.OsVer) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, OsVer);
    }
    if (null == this.OsBuild) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.OsBuild);
    }
    if (null == this.OsSuite) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.OsSuite);
    }
    if (null == this.OsPlatformSubRelease) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, OsPlatformSubRelease);
    }
    if (null == this.IsProtected) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.IsProtected);
    }
    if (null == this.Firewall) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Firewall);
    }
    if (null == this.UacLuaenable) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.UacLuaenable);
    }
    if (null == this.Census_DeviceFamily) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_DeviceFamily);
    }
    if (null == this.Census_ProcessorCoreCount) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_ProcessorCoreCount);
    }
    if (null == this.Census_ProcessorManufacturerIdentifier) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_ProcessorManufacturerIdentifier);
    }
    if (null == this.Census_ProcessorModelIdentifier) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_ProcessorModelIdentifier);
    }
    if (null == this.Census_PrimaryDiskTotalCapacity) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_PrimaryDiskTotalCapacity);
    }
    if (null == this.Census_PrimaryDiskTypeName) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_PrimaryDiskTypeName);
    }
    if (null == this.Census_SystemVolumeTotalCapacity) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_SystemVolumeTotalCapacity);
    }
    if (null == this.Census_HasOpticalDiskDrive) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.Census_HasOpticalDiskDrive);
    }
    if (null == this.Census_TotalPhysicalRAM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_TotalPhysicalRAM);
    }
    if (null == this.Census_PowerPlatformRoleName) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_PowerPlatformRoleName);
    }
    if (null == this.Census_InternalBatteryNumberOfCharges) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_InternalBatteryNumberOfCharges);
    }
    if (null == this.Census_OSArchitecture) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_OSArchitecture);
    }
    if (null == this.Census_OSEdition) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_OSEdition);
    }
    if (null == this.Census_OSWUAutoUpdateOptionsName) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_OSWUAutoUpdateOptionsName);
    }
    if (null == this.Census_IsPortableOperatingSystem) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.Census_IsPortableOperatingSystem);
    }
    if (null == this.Census_FirmwareManufacturerIdentifier) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_FirmwareManufacturerIdentifier);
    }
    if (null == this.Census_IsSecureBootEnabled) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.Census_IsSecureBootEnabled);
    }
    if (null == this.Census_IsVirtualDevice) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_IsVirtualDevice);
    }
    if (null == this.Census_IsTouchEnabled) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.Census_IsTouchEnabled);
    }
    if (null == this.Census_IsPenCapable) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.Census_IsPenCapable);
    }
    if (null == this.Census_IsAlwaysOnAlwaysConnectedCapable) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_IsAlwaysOnAlwaysConnectedCapable);
    }
    if (null == this.Wdft_IsGamer) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Wdft_IsGamer);
    }
    if (null == this.Census_InternalPrimaryDiagonalDisplaySizeInInches) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_InternalPrimaryDiagonalDisplaySizeInInches);
    }
    if (null == this.Census_MDC2FormFactor) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_MDC2FormFactor);
    }
    if (null == this.Census_OSSkuName) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_OSSkuName);
    }
    if (null == this.SkuEdition) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SkuEdition);
    }
    if (null == this.ProductName) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ProductName);
    }
    if (null == this.HasDetections) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.HasDetections);
    }
  }
  public void write0(DataOutput __dataOut) throws IOException {
    if (null == this.MachineId) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.MachineId);
    }
    if (null == this.IsBeta) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.IsBeta);
    }
    if (null == this.AVProductStatesIdentifier) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.AVProductStatesIdentifier);
    }
    if (null == this.AVProductsInstalled) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.AVProductsInstalled);
    }
    if (null == this.AVProductsEnabled) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.AVProductsEnabled);
    }
    if (null == this.HasTpm) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.HasTpm);
    }
    if (null == this.Platform) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Platform);
    }
    if (null == this.Processor) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Processor);
    }
    if (null == this.OsVer) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, OsVer);
    }
    if (null == this.OsBuild) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.OsBuild);
    }
    if (null == this.OsSuite) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.OsSuite);
    }
    if (null == this.OsPlatformSubRelease) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, OsPlatformSubRelease);
    }
    if (null == this.IsProtected) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.IsProtected);
    }
    if (null == this.Firewall) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Firewall);
    }
    if (null == this.UacLuaenable) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.UacLuaenable);
    }
    if (null == this.Census_DeviceFamily) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_DeviceFamily);
    }
    if (null == this.Census_ProcessorCoreCount) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_ProcessorCoreCount);
    }
    if (null == this.Census_ProcessorManufacturerIdentifier) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_ProcessorManufacturerIdentifier);
    }
    if (null == this.Census_ProcessorModelIdentifier) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_ProcessorModelIdentifier);
    }
    if (null == this.Census_PrimaryDiskTotalCapacity) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_PrimaryDiskTotalCapacity);
    }
    if (null == this.Census_PrimaryDiskTypeName) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_PrimaryDiskTypeName);
    }
    if (null == this.Census_SystemVolumeTotalCapacity) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_SystemVolumeTotalCapacity);
    }
    if (null == this.Census_HasOpticalDiskDrive) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.Census_HasOpticalDiskDrive);
    }
    if (null == this.Census_TotalPhysicalRAM) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_TotalPhysicalRAM);
    }
    if (null == this.Census_PowerPlatformRoleName) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_PowerPlatformRoleName);
    }
    if (null == this.Census_InternalBatteryNumberOfCharges) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_InternalBatteryNumberOfCharges);
    }
    if (null == this.Census_OSArchitecture) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_OSArchitecture);
    }
    if (null == this.Census_OSEdition) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_OSEdition);
    }
    if (null == this.Census_OSWUAutoUpdateOptionsName) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_OSWUAutoUpdateOptionsName);
    }
    if (null == this.Census_IsPortableOperatingSystem) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.Census_IsPortableOperatingSystem);
    }
    if (null == this.Census_FirmwareManufacturerIdentifier) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_FirmwareManufacturerIdentifier);
    }
    if (null == this.Census_IsSecureBootEnabled) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.Census_IsSecureBootEnabled);
    }
    if (null == this.Census_IsVirtualDevice) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_IsVirtualDevice);
    }
    if (null == this.Census_IsTouchEnabled) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.Census_IsTouchEnabled);
    }
    if (null == this.Census_IsPenCapable) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.Census_IsPenCapable);
    }
    if (null == this.Census_IsAlwaysOnAlwaysConnectedCapable) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_IsAlwaysOnAlwaysConnectedCapable);
    }
    if (null == this.Wdft_IsGamer) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Wdft_IsGamer);
    }
    if (null == this.Census_InternalPrimaryDiagonalDisplaySizeInInches) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeDouble(this.Census_InternalPrimaryDiagonalDisplaySizeInInches);
    }
    if (null == this.Census_MDC2FormFactor) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_MDC2FormFactor);
    }
    if (null == this.Census_OSSkuName) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, Census_OSSkuName);
    }
    if (null == this.SkuEdition) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, SkuEdition);
    }
    if (null == this.ProductName) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    Text.writeString(__dataOut, ProductName);
    }
    if (null == this.HasDetections) { 
        __dataOut.writeBoolean(true);
    } else {
        __dataOut.writeBoolean(false);
    __dataOut.writeInt(this.HasDetections);
    }
  }
  private static final DelimiterSet __outputDelimiters = new DelimiterSet((char) 44, (char) 10, (char) 0, (char) 0, false);
  public String toString() {
    return toString(__outputDelimiters, true);
  }
  public String toString(DelimiterSet delimiters) {
    return toString(delimiters, true);
  }
  public String toString(boolean useRecordDelim) {
    return toString(__outputDelimiters, useRecordDelim);
  }
  public String toString(DelimiterSet delimiters, boolean useRecordDelim) {
    StringBuilder __sb = new StringBuilder();
    char fieldDelim = delimiters.getFieldsTerminatedBy();
    __sb.append(FieldFormatter.escapeAndEnclose(MachineId==null?"null":"" + MachineId, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IsBeta==null?"null":"" + IsBeta, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(AVProductStatesIdentifier==null?"null":"" + AVProductStatesIdentifier, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(AVProductsInstalled==null?"null":"" + AVProductsInstalled, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(AVProductsEnabled==null?"null":"" + AVProductsEnabled, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(HasTpm==null?"null":"" + HasTpm, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Platform==null?"null":Platform, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Processor==null?"null":Processor, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OsVer==null?"null":OsVer, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OsBuild==null?"null":"" + OsBuild, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OsSuite==null?"null":"" + OsSuite, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OsPlatformSubRelease==null?"null":OsPlatformSubRelease, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IsProtected==null?"null":"" + IsProtected, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Firewall==null?"null":"" + Firewall, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(UacLuaenable==null?"null":"" + UacLuaenable, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_DeviceFamily==null?"null":Census_DeviceFamily, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_ProcessorCoreCount==null?"null":"" + Census_ProcessorCoreCount, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_ProcessorManufacturerIdentifier==null?"null":"" + Census_ProcessorManufacturerIdentifier, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_ProcessorModelIdentifier==null?"null":"" + Census_ProcessorModelIdentifier, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_PrimaryDiskTotalCapacity==null?"null":"" + Census_PrimaryDiskTotalCapacity, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_PrimaryDiskTypeName==null?"null":Census_PrimaryDiskTypeName, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_SystemVolumeTotalCapacity==null?"null":"" + Census_SystemVolumeTotalCapacity, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_HasOpticalDiskDrive==null?"null":"" + Census_HasOpticalDiskDrive, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_TotalPhysicalRAM==null?"null":"" + Census_TotalPhysicalRAM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_PowerPlatformRoleName==null?"null":Census_PowerPlatformRoleName, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_InternalBatteryNumberOfCharges==null?"null":"" + Census_InternalBatteryNumberOfCharges, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_OSArchitecture==null?"null":Census_OSArchitecture, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_OSEdition==null?"null":Census_OSEdition, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_OSWUAutoUpdateOptionsName==null?"null":Census_OSWUAutoUpdateOptionsName, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_IsPortableOperatingSystem==null?"null":"" + Census_IsPortableOperatingSystem, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_FirmwareManufacturerIdentifier==null?"null":"" + Census_FirmwareManufacturerIdentifier, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_IsSecureBootEnabled==null?"null":"" + Census_IsSecureBootEnabled, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_IsVirtualDevice==null?"null":"" + Census_IsVirtualDevice, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_IsTouchEnabled==null?"null":"" + Census_IsTouchEnabled, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_IsPenCapable==null?"null":"" + Census_IsPenCapable, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_IsAlwaysOnAlwaysConnectedCapable==null?"null":"" + Census_IsAlwaysOnAlwaysConnectedCapable, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Wdft_IsGamer==null?"null":"" + Wdft_IsGamer, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_InternalPrimaryDiagonalDisplaySizeInInches==null?"null":"" + Census_InternalPrimaryDiagonalDisplaySizeInInches, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_MDC2FormFactor==null?"null":Census_MDC2FormFactor, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_OSSkuName==null?"null":Census_OSSkuName, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SkuEdition==null?"null":SkuEdition, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ProductName==null?"null":ProductName, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(HasDetections==null?"null":"" + HasDetections, delimiters));
    if (useRecordDelim) {
      __sb.append(delimiters.getLinesTerminatedBy());
    }
    return __sb.toString();
  }
  public void toString0(DelimiterSet delimiters, StringBuilder __sb, char fieldDelim) {
    __sb.append(FieldFormatter.escapeAndEnclose(MachineId==null?"null":"" + MachineId, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IsBeta==null?"null":"" + IsBeta, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(AVProductStatesIdentifier==null?"null":"" + AVProductStatesIdentifier, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(AVProductsInstalled==null?"null":"" + AVProductsInstalled, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(AVProductsEnabled==null?"null":"" + AVProductsEnabled, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(HasTpm==null?"null":"" + HasTpm, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Platform==null?"null":Platform, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Processor==null?"null":Processor, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OsVer==null?"null":OsVer, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OsBuild==null?"null":"" + OsBuild, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OsSuite==null?"null":"" + OsSuite, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(OsPlatformSubRelease==null?"null":OsPlatformSubRelease, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(IsProtected==null?"null":"" + IsProtected, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Firewall==null?"null":"" + Firewall, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(UacLuaenable==null?"null":"" + UacLuaenable, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_DeviceFamily==null?"null":Census_DeviceFamily, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_ProcessorCoreCount==null?"null":"" + Census_ProcessorCoreCount, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_ProcessorManufacturerIdentifier==null?"null":"" + Census_ProcessorManufacturerIdentifier, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_ProcessorModelIdentifier==null?"null":"" + Census_ProcessorModelIdentifier, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_PrimaryDiskTotalCapacity==null?"null":"" + Census_PrimaryDiskTotalCapacity, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_PrimaryDiskTypeName==null?"null":Census_PrimaryDiskTypeName, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_SystemVolumeTotalCapacity==null?"null":"" + Census_SystemVolumeTotalCapacity, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_HasOpticalDiskDrive==null?"null":"" + Census_HasOpticalDiskDrive, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_TotalPhysicalRAM==null?"null":"" + Census_TotalPhysicalRAM, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_PowerPlatformRoleName==null?"null":Census_PowerPlatformRoleName, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_InternalBatteryNumberOfCharges==null?"null":"" + Census_InternalBatteryNumberOfCharges, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_OSArchitecture==null?"null":Census_OSArchitecture, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_OSEdition==null?"null":Census_OSEdition, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_OSWUAutoUpdateOptionsName==null?"null":Census_OSWUAutoUpdateOptionsName, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_IsPortableOperatingSystem==null?"null":"" + Census_IsPortableOperatingSystem, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_FirmwareManufacturerIdentifier==null?"null":"" + Census_FirmwareManufacturerIdentifier, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_IsSecureBootEnabled==null?"null":"" + Census_IsSecureBootEnabled, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_IsVirtualDevice==null?"null":"" + Census_IsVirtualDevice, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_IsTouchEnabled==null?"null":"" + Census_IsTouchEnabled, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_IsPenCapable==null?"null":"" + Census_IsPenCapable, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_IsAlwaysOnAlwaysConnectedCapable==null?"null":"" + Census_IsAlwaysOnAlwaysConnectedCapable, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Wdft_IsGamer==null?"null":"" + Wdft_IsGamer, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_InternalPrimaryDiagonalDisplaySizeInInches==null?"null":"" + Census_InternalPrimaryDiagonalDisplaySizeInInches, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_MDC2FormFactor==null?"null":Census_MDC2FormFactor, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(Census_OSSkuName==null?"null":Census_OSSkuName, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(SkuEdition==null?"null":SkuEdition, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(ProductName==null?"null":ProductName, delimiters));
    __sb.append(fieldDelim);
    __sb.append(FieldFormatter.escapeAndEnclose(HasDetections==null?"null":"" + HasDetections, delimiters));
  }
  private static final DelimiterSet __inputDelimiters = new DelimiterSet((char) 44, (char) 10, (char) 0, (char) 0, false);
  private RecordParser __parser;
  public void parse(Text __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(CharSequence __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(byte [] __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(char [] __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(ByteBuffer __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  public void parse(CharBuffer __record) throws RecordParser.ParseError {
    if (null == this.__parser) {
      this.__parser = new RecordParser(__inputDelimiters);
    }
    List<String> __fields = this.__parser.parseRecord(__record);
    __loadFromFields(__fields);
  }

  private void __loadFromFields(List<String> fields) {
    Iterator<String> __it = fields.listIterator();
    String __cur_str = null;
    try {
    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.MachineId = null; } else {
      this.MachineId = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.IsBeta = null; } else {
      this.IsBeta = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.AVProductStatesIdentifier = null; } else {
      this.AVProductStatesIdentifier = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.AVProductsInstalled = null; } else {
      this.AVProductsInstalled = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.AVProductsEnabled = null; } else {
      this.AVProductsEnabled = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.HasTpm = null; } else {
      this.HasTpm = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Platform = null; } else {
      this.Platform = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Processor = null; } else {
      this.Processor = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.OsVer = null; } else {
      this.OsVer = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.OsBuild = null; } else {
      this.OsBuild = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.OsSuite = null; } else {
      this.OsSuite = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.OsPlatformSubRelease = null; } else {
      this.OsPlatformSubRelease = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.IsProtected = null; } else {
      this.IsProtected = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Firewall = null; } else {
      this.Firewall = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.UacLuaenable = null; } else {
      this.UacLuaenable = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_DeviceFamily = null; } else {
      this.Census_DeviceFamily = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_ProcessorCoreCount = null; } else {
      this.Census_ProcessorCoreCount = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_ProcessorManufacturerIdentifier = null; } else {
      this.Census_ProcessorManufacturerIdentifier = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_ProcessorModelIdentifier = null; } else {
      this.Census_ProcessorModelIdentifier = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_PrimaryDiskTotalCapacity = null; } else {
      this.Census_PrimaryDiskTotalCapacity = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_PrimaryDiskTypeName = null; } else {
      this.Census_PrimaryDiskTypeName = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_SystemVolumeTotalCapacity = null; } else {
      this.Census_SystemVolumeTotalCapacity = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_HasOpticalDiskDrive = null; } else {
      this.Census_HasOpticalDiskDrive = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_TotalPhysicalRAM = null; } else {
      this.Census_TotalPhysicalRAM = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_PowerPlatformRoleName = null; } else {
      this.Census_PowerPlatformRoleName = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_InternalBatteryNumberOfCharges = null; } else {
      this.Census_InternalBatteryNumberOfCharges = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_OSArchitecture = null; } else {
      this.Census_OSArchitecture = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_OSEdition = null; } else {
      this.Census_OSEdition = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_OSWUAutoUpdateOptionsName = null; } else {
      this.Census_OSWUAutoUpdateOptionsName = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_IsPortableOperatingSystem = null; } else {
      this.Census_IsPortableOperatingSystem = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_FirmwareManufacturerIdentifier = null; } else {
      this.Census_FirmwareManufacturerIdentifier = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_IsSecureBootEnabled = null; } else {
      this.Census_IsSecureBootEnabled = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_IsVirtualDevice = null; } else {
      this.Census_IsVirtualDevice = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_IsTouchEnabled = null; } else {
      this.Census_IsTouchEnabled = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_IsPenCapable = null; } else {
      this.Census_IsPenCapable = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_IsAlwaysOnAlwaysConnectedCapable = null; } else {
      this.Census_IsAlwaysOnAlwaysConnectedCapable = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Wdft_IsGamer = null; } else {
      this.Wdft_IsGamer = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_InternalPrimaryDiagonalDisplaySizeInInches = null; } else {
      this.Census_InternalPrimaryDiagonalDisplaySizeInInches = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_MDC2FormFactor = null; } else {
      this.Census_MDC2FormFactor = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_OSSkuName = null; } else {
      this.Census_OSSkuName = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SkuEdition = null; } else {
      this.SkuEdition = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ProductName = null; } else {
      this.ProductName = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.HasDetections = null; } else {
      this.HasDetections = Integer.valueOf(__cur_str);
    }

    } catch (RuntimeException e) {    throw new RuntimeException("Can't parse input data: '" + __cur_str + "'", e);    }  }

  private void __loadFromFields0(Iterator<String> __it) {
    String __cur_str = null;
    try {
    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.MachineId = null; } else {
      this.MachineId = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.IsBeta = null; } else {
      this.IsBeta = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.AVProductStatesIdentifier = null; } else {
      this.AVProductStatesIdentifier = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.AVProductsInstalled = null; } else {
      this.AVProductsInstalled = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.AVProductsEnabled = null; } else {
      this.AVProductsEnabled = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.HasTpm = null; } else {
      this.HasTpm = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Platform = null; } else {
      this.Platform = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Processor = null; } else {
      this.Processor = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.OsVer = null; } else {
      this.OsVer = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.OsBuild = null; } else {
      this.OsBuild = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.OsSuite = null; } else {
      this.OsSuite = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.OsPlatformSubRelease = null; } else {
      this.OsPlatformSubRelease = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.IsProtected = null; } else {
      this.IsProtected = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Firewall = null; } else {
      this.Firewall = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.UacLuaenable = null; } else {
      this.UacLuaenable = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_DeviceFamily = null; } else {
      this.Census_DeviceFamily = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_ProcessorCoreCount = null; } else {
      this.Census_ProcessorCoreCount = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_ProcessorManufacturerIdentifier = null; } else {
      this.Census_ProcessorManufacturerIdentifier = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_ProcessorModelIdentifier = null; } else {
      this.Census_ProcessorModelIdentifier = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_PrimaryDiskTotalCapacity = null; } else {
      this.Census_PrimaryDiskTotalCapacity = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_PrimaryDiskTypeName = null; } else {
      this.Census_PrimaryDiskTypeName = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_SystemVolumeTotalCapacity = null; } else {
      this.Census_SystemVolumeTotalCapacity = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_HasOpticalDiskDrive = null; } else {
      this.Census_HasOpticalDiskDrive = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_TotalPhysicalRAM = null; } else {
      this.Census_TotalPhysicalRAM = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_PowerPlatformRoleName = null; } else {
      this.Census_PowerPlatformRoleName = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_InternalBatteryNumberOfCharges = null; } else {
      this.Census_InternalBatteryNumberOfCharges = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_OSArchitecture = null; } else {
      this.Census_OSArchitecture = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_OSEdition = null; } else {
      this.Census_OSEdition = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_OSWUAutoUpdateOptionsName = null; } else {
      this.Census_OSWUAutoUpdateOptionsName = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_IsPortableOperatingSystem = null; } else {
      this.Census_IsPortableOperatingSystem = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_FirmwareManufacturerIdentifier = null; } else {
      this.Census_FirmwareManufacturerIdentifier = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_IsSecureBootEnabled = null; } else {
      this.Census_IsSecureBootEnabled = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_IsVirtualDevice = null; } else {
      this.Census_IsVirtualDevice = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_IsTouchEnabled = null; } else {
      this.Census_IsTouchEnabled = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_IsPenCapable = null; } else {
      this.Census_IsPenCapable = Integer.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_IsAlwaysOnAlwaysConnectedCapable = null; } else {
      this.Census_IsAlwaysOnAlwaysConnectedCapable = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Wdft_IsGamer = null; } else {
      this.Wdft_IsGamer = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.Census_InternalPrimaryDiagonalDisplaySizeInInches = null; } else {
      this.Census_InternalPrimaryDiagonalDisplaySizeInInches = Double.valueOf(__cur_str);
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_MDC2FormFactor = null; } else {
      this.Census_MDC2FormFactor = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.Census_OSSkuName = null; } else {
      this.Census_OSSkuName = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.SkuEdition = null; } else {
      this.SkuEdition = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null")) { this.ProductName = null; } else {
      this.ProductName = __cur_str;
    }

    if (__it.hasNext()) {
        __cur_str = __it.next();
    } else {
        __cur_str = "null";
    }
    if (__cur_str.equals("null") || __cur_str.length() == 0) { this.HasDetections = null; } else {
      this.HasDetections = Integer.valueOf(__cur_str);
    }

    } catch (RuntimeException e) {    throw new RuntimeException("Can't parse input data: '" + __cur_str + "'", e);    }  }

  public Object clone() throws CloneNotSupportedException {
    malware_prediction o = (malware_prediction) super.clone();
    return o;
  }

  public void clone0(malware_prediction o) throws CloneNotSupportedException {
  }

  public Map<String, Object> getFieldMap() {
    Map<String, Object> __sqoop$field_map = new HashMap<String, Object>();
    __sqoop$field_map.put("MachineId", this.MachineId);
    __sqoop$field_map.put("IsBeta", this.IsBeta);
    __sqoop$field_map.put("AVProductStatesIdentifier", this.AVProductStatesIdentifier);
    __sqoop$field_map.put("AVProductsInstalled", this.AVProductsInstalled);
    __sqoop$field_map.put("AVProductsEnabled", this.AVProductsEnabled);
    __sqoop$field_map.put("HasTpm", this.HasTpm);
    __sqoop$field_map.put("Platform", this.Platform);
    __sqoop$field_map.put("Processor", this.Processor);
    __sqoop$field_map.put("OsVer", this.OsVer);
    __sqoop$field_map.put("OsBuild", this.OsBuild);
    __sqoop$field_map.put("OsSuite", this.OsSuite);
    __sqoop$field_map.put("OsPlatformSubRelease", this.OsPlatformSubRelease);
    __sqoop$field_map.put("IsProtected", this.IsProtected);
    __sqoop$field_map.put("Firewall", this.Firewall);
    __sqoop$field_map.put("UacLuaenable", this.UacLuaenable);
    __sqoop$field_map.put("Census_DeviceFamily", this.Census_DeviceFamily);
    __sqoop$field_map.put("Census_ProcessorCoreCount", this.Census_ProcessorCoreCount);
    __sqoop$field_map.put("Census_ProcessorManufacturerIdentifier", this.Census_ProcessorManufacturerIdentifier);
    __sqoop$field_map.put("Census_ProcessorModelIdentifier", this.Census_ProcessorModelIdentifier);
    __sqoop$field_map.put("Census_PrimaryDiskTotalCapacity", this.Census_PrimaryDiskTotalCapacity);
    __sqoop$field_map.put("Census_PrimaryDiskTypeName", this.Census_PrimaryDiskTypeName);
    __sqoop$field_map.put("Census_SystemVolumeTotalCapacity", this.Census_SystemVolumeTotalCapacity);
    __sqoop$field_map.put("Census_HasOpticalDiskDrive", this.Census_HasOpticalDiskDrive);
    __sqoop$field_map.put("Census_TotalPhysicalRAM", this.Census_TotalPhysicalRAM);
    __sqoop$field_map.put("Census_PowerPlatformRoleName", this.Census_PowerPlatformRoleName);
    __sqoop$field_map.put("Census_InternalBatteryNumberOfCharges", this.Census_InternalBatteryNumberOfCharges);
    __sqoop$field_map.put("Census_OSArchitecture", this.Census_OSArchitecture);
    __sqoop$field_map.put("Census_OSEdition", this.Census_OSEdition);
    __sqoop$field_map.put("Census_OSWUAutoUpdateOptionsName", this.Census_OSWUAutoUpdateOptionsName);
    __sqoop$field_map.put("Census_IsPortableOperatingSystem", this.Census_IsPortableOperatingSystem);
    __sqoop$field_map.put("Census_FirmwareManufacturerIdentifier", this.Census_FirmwareManufacturerIdentifier);
    __sqoop$field_map.put("Census_IsSecureBootEnabled", this.Census_IsSecureBootEnabled);
    __sqoop$field_map.put("Census_IsVirtualDevice", this.Census_IsVirtualDevice);
    __sqoop$field_map.put("Census_IsTouchEnabled", this.Census_IsTouchEnabled);
    __sqoop$field_map.put("Census_IsPenCapable", this.Census_IsPenCapable);
    __sqoop$field_map.put("Census_IsAlwaysOnAlwaysConnectedCapable", this.Census_IsAlwaysOnAlwaysConnectedCapable);
    __sqoop$field_map.put("Wdft_IsGamer", this.Wdft_IsGamer);
    __sqoop$field_map.put("Census_InternalPrimaryDiagonalDisplaySizeInInches", this.Census_InternalPrimaryDiagonalDisplaySizeInInches);
    __sqoop$field_map.put("Census_MDC2FormFactor", this.Census_MDC2FormFactor);
    __sqoop$field_map.put("Census_OSSkuName", this.Census_OSSkuName);
    __sqoop$field_map.put("SkuEdition", this.SkuEdition);
    __sqoop$field_map.put("ProductName", this.ProductName);
    __sqoop$field_map.put("HasDetections", this.HasDetections);
    return __sqoop$field_map;
  }

  public void getFieldMap0(Map<String, Object> __sqoop$field_map) {
    __sqoop$field_map.put("MachineId", this.MachineId);
    __sqoop$field_map.put("IsBeta", this.IsBeta);
    __sqoop$field_map.put("AVProductStatesIdentifier", this.AVProductStatesIdentifier);
    __sqoop$field_map.put("AVProductsInstalled", this.AVProductsInstalled);
    __sqoop$field_map.put("AVProductsEnabled", this.AVProductsEnabled);
    __sqoop$field_map.put("HasTpm", this.HasTpm);
    __sqoop$field_map.put("Platform", this.Platform);
    __sqoop$field_map.put("Processor", this.Processor);
    __sqoop$field_map.put("OsVer", this.OsVer);
    __sqoop$field_map.put("OsBuild", this.OsBuild);
    __sqoop$field_map.put("OsSuite", this.OsSuite);
    __sqoop$field_map.put("OsPlatformSubRelease", this.OsPlatformSubRelease);
    __sqoop$field_map.put("IsProtected", this.IsProtected);
    __sqoop$field_map.put("Firewall", this.Firewall);
    __sqoop$field_map.put("UacLuaenable", this.UacLuaenable);
    __sqoop$field_map.put("Census_DeviceFamily", this.Census_DeviceFamily);
    __sqoop$field_map.put("Census_ProcessorCoreCount", this.Census_ProcessorCoreCount);
    __sqoop$field_map.put("Census_ProcessorManufacturerIdentifier", this.Census_ProcessorManufacturerIdentifier);
    __sqoop$field_map.put("Census_ProcessorModelIdentifier", this.Census_ProcessorModelIdentifier);
    __sqoop$field_map.put("Census_PrimaryDiskTotalCapacity", this.Census_PrimaryDiskTotalCapacity);
    __sqoop$field_map.put("Census_PrimaryDiskTypeName", this.Census_PrimaryDiskTypeName);
    __sqoop$field_map.put("Census_SystemVolumeTotalCapacity", this.Census_SystemVolumeTotalCapacity);
    __sqoop$field_map.put("Census_HasOpticalDiskDrive", this.Census_HasOpticalDiskDrive);
    __sqoop$field_map.put("Census_TotalPhysicalRAM", this.Census_TotalPhysicalRAM);
    __sqoop$field_map.put("Census_PowerPlatformRoleName", this.Census_PowerPlatformRoleName);
    __sqoop$field_map.put("Census_InternalBatteryNumberOfCharges", this.Census_InternalBatteryNumberOfCharges);
    __sqoop$field_map.put("Census_OSArchitecture", this.Census_OSArchitecture);
    __sqoop$field_map.put("Census_OSEdition", this.Census_OSEdition);
    __sqoop$field_map.put("Census_OSWUAutoUpdateOptionsName", this.Census_OSWUAutoUpdateOptionsName);
    __sqoop$field_map.put("Census_IsPortableOperatingSystem", this.Census_IsPortableOperatingSystem);
    __sqoop$field_map.put("Census_FirmwareManufacturerIdentifier", this.Census_FirmwareManufacturerIdentifier);
    __sqoop$field_map.put("Census_IsSecureBootEnabled", this.Census_IsSecureBootEnabled);
    __sqoop$field_map.put("Census_IsVirtualDevice", this.Census_IsVirtualDevice);
    __sqoop$field_map.put("Census_IsTouchEnabled", this.Census_IsTouchEnabled);
    __sqoop$field_map.put("Census_IsPenCapable", this.Census_IsPenCapable);
    __sqoop$field_map.put("Census_IsAlwaysOnAlwaysConnectedCapable", this.Census_IsAlwaysOnAlwaysConnectedCapable);
    __sqoop$field_map.put("Wdft_IsGamer", this.Wdft_IsGamer);
    __sqoop$field_map.put("Census_InternalPrimaryDiagonalDisplaySizeInInches", this.Census_InternalPrimaryDiagonalDisplaySizeInInches);
    __sqoop$field_map.put("Census_MDC2FormFactor", this.Census_MDC2FormFactor);
    __sqoop$field_map.put("Census_OSSkuName", this.Census_OSSkuName);
    __sqoop$field_map.put("SkuEdition", this.SkuEdition);
    __sqoop$field_map.put("ProductName", this.ProductName);
    __sqoop$field_map.put("HasDetections", this.HasDetections);
  }

  public void setField(String __fieldName, Object __fieldVal) {
    if (!setters.containsKey(__fieldName)) {
      throw new RuntimeException("No such field:"+__fieldName);
    }
    setters.get(__fieldName).setField(__fieldVal);
  }

}
